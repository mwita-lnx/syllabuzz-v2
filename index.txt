real_time_service/
├── src/
│   ├── index.js              # Main entry point
│   ├── config/
│   │   ├── index.js          # Configuration loader
│   │   ├── mongoose.js       # MongoDB connection setup
│   │   ├── express.js        # Express configuration
│   │   └── socket.js         # Socket.IO setup
│   ├── middleware/
│   │   ├── auth.js           # JWT authentication middleware
│   │   └── error-handler.js  # Error handling middleware
│   ├── routes/
│   │   ├── index.js          # Routes loader
│   │   ├── rooms.js          # Revision rooms CRUD
│   │   ├── messages.js       # Room messages
│   │   └── polls.js          # Polls functionality
│   ├── controllers/
│   │   ├── room.controller.js    # Revision room controllers
│   │   ├── message.controller.js # Message controllers  
│   │   └── poll.controller.js    # Poll controllers
│   ├── models/
│   │   ├── revision-room.js  # Room model
│   │   ├── message.js        # Message model
│   │   └── poll.js           # Poll model
│   ├── socket/
│   │   ├── index.js          # Socket event handlers loader
│   │   ├── room-handler.js   # Room event handlers
│   │   ├── message-handler.js # Message event handlers
│   │   └── poll-handler.js   # Poll event handlers
│   └── utils/
│       ├── logger.js         # Logging utility
│       └── response.js       # API response formatter
├── .env                      # Environment variables
├── .gitignore                # Git ignore file
├── package.json              # Node.js package file
├── Dockerfile                # Docker configuration
└── docker-compose.yml        # Docker Compose configuration




data_processing_service/
├── app/
│   ├── __init__.py          # Contains create_app function
│   ├── blueprints/
│   │   ├── __init__.py
│   │   ├── auth.py          # Authentication routes
│   │   ├── units.py         # Unit management routes
│   │   ├── pastpapers.py    # Past paper management routes
│   │   ├── ai.py            # AI analysis routes
│   │   ├── saved_items.py   # NEW: Saved items functionality
│   │   ├── ratings.py       # NEW: Ratings functionality
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── auth_middleware.py  # JWT authentication middleware
│   │   ├── file_handler.py     # File upload/download utilities
│   │   ├── validators.py       # Input validation functions
├── uploads/                 # Directory for uploaded files
├── tests/                   # Test cases
├── .env                     # Environment variables
├── requirements.txt         # Python dependencies
├── Dockerfile               # Docker configuration
└── wsgi.py                  # WSGI entry point for the Flask app





      {
        id: '1',
        name: 'Data Structures & Algorithms Study Group',
        description: 'Studying for the upcoming DSA final exam. Focus on sorting algorithms and tree traversals.',
        facultyCode: 'sci',
        faculty: 'Science',
        unit_id: '1',
        unit_code: 'CS202',
        unitName: 'Data Structures and Algorithms',
        topic: 'Final Exam Preparation',
        memberCount: 15,
        activeMembers: 8,
        created_at: '2024-03-15T10:00:00Z',
        created_by: 'user123',
        is_active: true,
        tags: ['DSA', 'Algorithms', 'Sorting', 'Trees'],
        participants: [
          { user_id: 'user123', user_name: 'Alice Johnson', status: 'active', joined_at: '2024-03-15T10:00:00Z' },
          { user_id: 'user456', user_name: 'Bob Smith', status: 'active', joined_at: '2024-03-15T10:05:00Z' },
          { user_id: 'user789', user_name: 'Carol Davis', status: 'active', joined_at: '2024-03-15T10:10:00Z' },
          { user_id: 'user101', user_name: 'Dave Wilson', status: 'away', joined_at: '2024-03-15T10:15:00Z' }
        ],
        sessionActive: true,
        current_focus: 'Graph Algorithms',
        papers: ['1', '8'],
        chatMessages: [
          { id: 'msg1', userId: 'user123', userName: 'Alice Johnson', content: 'Hey everyone! Let\'s focus on time complexity analysis today.', timestamp: '2024-03-20T14:00:00Z', type: 'text' },
          { id: 'msg2', userId: 'user456', userName: 'Bob Smith', content: 'Sounds good! I\'ve been struggling with recurrence relations.', timestamp: '2024-03-20T14:02:00Z', type: 'text' },
          { id: 'msg3', userId: 'system', userName: 'System', content: 'Alice Johnson has started a pomodoro timer (25 minutes).', timestamp: '2024-03-20T14:05:00Z', type: 'system' },
          { id: 'msg4', userId: 'user789', userName: 'Carol Davis', content: 'I found a great resource for understanding Master Theorem: https://example.com/master-theorem', timestamp: '2024-03-20T14:10:00Z', type: 'text' },
          { id: 'msg5', userId: 'user123', userName: 'Alice Johnson', content: 'Has anyone solved the tree traversal problem from the 2022 exam?', timestamp: '2024-03-20T14:15:00Z', type: 'question' },
          { id: 'msg6', userId: 'ai', userName: 'AI Tutor', content: 'For tree traversal problems, remember the key differences between preorder, inorder, and postorder traversals. Preorder visits the root first, then left subtree, then right subtree. Inorder visits left subtree, then root, then right subtree. Postorder visits left subtree, then right subtree, then root.', timestamp: '2024-03-20T14:17:00Z', type: 'ai' },
          { id: 'msg7', userId: 'user456', userName: 'Bob Smith', content: 'Yes, I worked through it yesterday. The trick is to use a stack for the iterative approach.', timestamp: '2024-03-20T14:20:00Z', type: 'text' }
        ]
      },



src/
├── pages/
│   ├── RevisionRoomListPage.tsx   # Displays all rooms, search, filtering
│   └── RevisionRoomDetailPage.tsx # Shows a specific room with tabs
├── components/
│   ├── revision/
│   │   ├── RoomCard.tsx           # Card for a single room in the list
│   │   ├── RoomHeader.tsx         # Header for the room detail page
│   │   ├── CreateRoomForm.tsx     # Form to create a new room
│   │   ├── ChatFeature.tsx        # Chat functionality component
│   │   ├── ResourcesFeature.tsx   # Study resources functionality
│   │   ├── ProgressFeature.tsx    # Progress tracking feature
│   │   ├── RoomOverview.tsx       # Room overview tab content
│   │   └── ParticipantsList.tsx   # List of room participants
│   ├── study/
│   │   ├── FlashcardSetCard.tsx   # Card for a flashcard set
│   │   ├── StudyNoteCard.tsx      # Card for a study note
│   │   ├── QuizCard.tsx           # Card for a quiz
│   │   └── AITutorInterface.tsx   # AI Tutor component
│   └── shared/
│       ├── RoomContext.tsx        # Context for room state management
│       └── FacultySelector.tsx    # Faculty selection component
└── services/
    ├── room-service.ts           # API service for rooms
    ├── poll-service.ts           # API service for polls
    └── socket-service.ts         # Socket service for real-time features